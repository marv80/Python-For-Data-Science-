{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 0) imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1) chargement de données"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "path=\"./../Downloads/data/PPG_FieldStudy/S1/S1.pkl\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(path, \"rb\") as f:\n",
    "    data = pickle.load(f, encoding=\"latin-1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2) analyse de données"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['rpeaks', 'signal', 'label', 'activity', 'questionnaire', 'subject'])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>chest</th>\n",
       "      <th>wrist</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ACC</th>\n",
       "      <td>[[0.8564000129699707, -0.06779998540878296, -0...</td>\n",
       "      <td>[[-0.765625, -0.078125, 0.671875], [-0.765625,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BVP</th>\n",
       "      <td>NaN</td>\n",
       "      <td>[[7.28], [6.33], [5.46], [4.6], [3.74], [2.86]...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ECG</th>\n",
       "      <td>[[0.015609741210937498], [0.01812744140625], [...</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EDA</th>\n",
       "      <td>[[0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0....</td>\n",
       "      <td>[[4.722437], [4.728843], [4.718594], [4.717312...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EMG</th>\n",
       "      <td>[[-1.5], [-1.5], [-1.5], [-1.5], [-1.5], [-1.5...</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Resp</th>\n",
       "      <td>[[4.44183349609375], [4.45098876953125], [4.47...</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TEMP</th>\n",
       "      <td>NaN</td>\n",
       "      <td>[[32.13], [32.16], [32.16], [32.16], [32.16], ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Temp</th>\n",
       "      <td>[[-273.15], [-273.15], [-273.15], [-273.15], [...</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                  chest  \\\n",
       "ACC   [[0.8564000129699707, -0.06779998540878296, -0...   \n",
       "BVP                                                 NaN   \n",
       "ECG   [[0.015609741210937498], [0.01812744140625], [...   \n",
       "EDA   [[0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0....   \n",
       "EMG   [[-1.5], [-1.5], [-1.5], [-1.5], [-1.5], [-1.5...   \n",
       "Resp  [[4.44183349609375], [4.45098876953125], [4.47...   \n",
       "TEMP                                                NaN   \n",
       "Temp  [[-273.15], [-273.15], [-273.15], [-273.15], [...   \n",
       "\n",
       "                                                  wrist  \n",
       "ACC   [[-0.765625, -0.078125, 0.671875], [-0.765625,...  \n",
       "BVP   [[7.28], [6.33], [5.46], [4.6], [3.74], [2.86]...  \n",
       "ECG                                                 NaN  \n",
       "EDA   [[4.722437], [4.728843], [4.718594], [4.717312...  \n",
       "EMG                                                 NaN  \n",
       "Resp                                                NaN  \n",
       "TEMP  [[32.13], [32.16], [32.16], [32.16], [32.16], ...  \n",
       "Temp                                                NaN  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(data[\"signal\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3) création de dataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "clefs ok = ['rpeaks', 'signal', 'label', 'activity']\n",
      "clefs avec un pbms = ['questionnaireIf using all scalar values, you must pass an index', 'subjectDataFrame constructor not properly called!']\n"
     ]
    }
   ],
   "source": [
    "dfs  = []\n",
    "pbms = []\n",
    "oks  = []\n",
    "for k in data.keys():\n",
    "    try:\n",
    "        df = pd.DataFrame(data[k]) \n",
    "        dfs.append(df)\n",
    "        oks.append(k)\n",
    "    except Exception as e:\n",
    "        pbms.append(k + str(e))\n",
    "print(f\"clefs ok = {oks}\")\n",
    "print(f\"clefs avec un pbms = {pbms}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.1) regarder les DF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             0\n",
      "7610   4278210\n",
      "3338   1762532\n",
      "6958   3875382\n",
      "10535  5908828\n",
      "354     299981\n",
      "                                                  chest  \\\n",
      "Resp  [[4.44183349609375], [4.45098876953125], [4.47...   \n",
      "EDA   [[0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0....   \n",
      "ACC   [[0.8564000129699707, -0.06779998540878296, -0...   \n",
      "EMG   [[-1.5], [-1.5], [-1.5], [-1.5], [-1.5], [-1.5...   \n",
      "ECG   [[0.015609741210937498], [0.01812744140625], [...   \n",
      "\n",
      "                                                  wrist  \n",
      "Resp                                                NaN  \n",
      "EDA   [[4.722437], [4.728843], [4.718594], [4.717312...  \n",
      "ACC   [[-0.765625, -0.078125, 0.671875], [-0.765625,...  \n",
      "EMG                                                 NaN  \n",
      "ECG                                                 NaN  \n",
      "              0\n",
      "2256  68.128245\n",
      "2789  78.926648\n",
      "2144  89.266818\n",
      "2400  72.246000\n",
      "4243  67.184493\n",
      "         0\n",
      "607    1.0\n",
      "20277  6.0\n",
      "32686  8.0\n",
      "34624  8.0\n",
      "15654  0.0\n"
     ]
    }
   ],
   "source": [
    "for df in dfs:\n",
    "    print(df.sample(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
© 2020 GitHub, Inc.
Terms
Privacy
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
